{"ast":null,"code":"import { extend } from '../../shared/utils.js';\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nexport default function setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  }\n\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}","map":{"version":3,"sources":["/media/rabin/RANDOM1/resturantweb/node_modules/swiper/core/breakpoints/setBreakpoint.js"],"names":["extend","isGridEnabled","swiper","params","grid","rows","setBreakpoint","activeIndex","initialized","loopedSlides","$el","breakpoints","Object","keys","length","breakpoint","getBreakpoint","breakpointsBase","el","currentBreakpoint","breakpointOnlyParams","undefined","breakpointParams","originalParams","wasMultiRow","isMultiRow","wasEnabled","enabled","removeClass","containerModifierClass","emitContainerClasses","addClass","fill","directionChanged","direction","needsReLoop","loop","slidesPerView","changeDirection","isEnabled","assign","allowTouchMove","allowSlideNext","allowSlidePrev","disable","enable","emit","loopDestroy","loopCreate","updateSlides","slideTo"],"mappings":"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","sourcesContent":["import { extend } from '../../shared/utils.js';\n\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\n\nexport default function setBreakpoint() {\n  const swiper = this;\n  const {\n    activeIndex,\n    initialized,\n    loopedSlides = 0,\n    params,\n    $el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters\n\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n\n  if (wasMultiRow && !isMultiRow) {\n    $el.removeClass(`${params.containerModifierClass}grid ${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    $el.addClass(`${params.containerModifierClass}grid`);\n\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      $el.addClass(`${params.containerModifierClass}grid-column`);\n    }\n\n    swiper.emitContainerClasses();\n  }\n\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate();\n    swiper.updateSlides();\n    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n  }\n\n  swiper.emit('breakpoint', breakpointParams);\n}"]},"metadata":{},"sourceType":"module"}